<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 7.0 (Python 3.12.2 on win32)" generated="2024-04-03T12:02:07.559849" rpa="false" schemaversion="5">
<suite id="s1" name="Apijsonplaceholder" source="c:\Edgar\Estudos\RepositoriosGit\ApiJsonPlaceHolder_RobotFrameWork\tests\apijsonplaceholder.robot">
<test id="s1-t1" name="Scenario: Validate if the emails in the comments are properly formatted" line="10">
<kw name="Create Session" owner="RequestsLibrary" type="SETUP">
<msg time="2024-04-03T12:02:07.780251" level="INFO">Creating Session using : alias=jsonplaceholder, url=https://jsonplaceholder.typicode.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<arg>jsonplaceholder</arg>
<arg>https://jsonplaceholder.typicode.com</arg>
<arg>verify=true</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<status status="PASS" start="2024-04-03T12:02:07.780251" elapsed="0.015584"/>
</kw>
<kw name="Given that I search for the username &quot;Delphine&quot;" owner="apiJsonPlaceholder_steps" source_name="that I search for the username &quot;${user}&quot;">
<kw name="GetUser ${user}" owner="apiJsonPlaceholder" source_name="GetUser ${user}">
<kw name="GET On Session" owner="RequestsLibrary">
<msg time="2024-04-03T12:02:08.585691" level="INFO">GET Request : url=https://jsonplaceholder.typicode.com/users?username=Delphine 
 path_url=/users?username=Delphine 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg time="2024-04-03T12:02:08.585691" level="INFO">GET Response : url=https://jsonplaceholder.typicode.com/users?username=Delphine 
 status=200, reason=OK 
 headers={'Date': 'Wed, 03 Apr 2024 15:02:08 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Report-To': '{"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1712086179&amp;sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&amp;s=RSQ77Tc%2BVFE1ezcZVRmgDKqs29sKupILAr5wyLWfVMc%3D"}]}', 'Reporting-Endpoints': 'heroku-nel=https://nel.heroku.com/reports?ts=1712086179&amp;sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&amp;s=RSQ77Tc%2BVFE1ezcZVRmgDKqs29sKupILAr5wyLWfVMc%3D', 'Nel': '{"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '999', 'X-Ratelimit-Reset': '1712086215', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"23d-EKDCRFg7oh6G4KjjoWlynBpL2AY"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '8277', 'Server': 'cloudflare', 'CF-RAY': '86e9f01fed880a0e-MIA', 'Content-Encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'} 
 body=[
  {
    "id": 9,
    "name": "Glenna Reichert",
    "username": "Delphine",
    "email": "Chaim_McDermott@dana.io",
    "address": {
      "street": "Dayna Park",
      "suite": "Suite 449",
      "city": "Bartholomebury",
      "zipcode": "76495-3109",
      "geo": {
        "lat": "24.6463",
        "lng": "-168.8889"
      }
    },
    "phone": "(775)976-6794 x41206",
    "website": "conrad.com",
    "company": {
      "name": "Yost and Sons",
      "catchPhrase": "Switchable contextually-based project",
      "bs": "aggregate real-time technologies"
    }
  }
] 
 </msg>
<msg time="2024-04-03T12:02:08.585691" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<arg>jsonplaceholder</arg>
<arg>/users?username\=${user}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<status status="PASS" start="2024-04-03T12:02:07.802631" elapsed="0.798696"/>
</kw>
<kw name="Should Be Equal As Numbers" owner="BuiltIn">
<msg time="2024-04-03T12:02:08.601327" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${response.status_code}</arg>
<arg>200</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<status status="PASS" start="2024-04-03T12:02:08.601327" elapsed="0.000000"/>
</kw>
<return>
<value>${response.json()}</value>
<status status="PASS" start="2024-04-03T12:02:08.601327" elapsed="0.000000"/>
</return>
<msg time="2024-04-03T12:02:08.601327" level="INFO">${response} = [{'id': 9, 'name': 'Glenna Reichert', 'username': 'Delphine', 'email': 'Chaim_McDermott@dana.io', 'address': {'street': 'Dayna Park', 'suite': 'Suite 449', 'city': 'Bartholomebury', 'zipcode': '76495-...</msg>
<var>${response}</var>
<status status="PASS" start="2024-04-03T12:02:07.795835" elapsed="0.805492"/>
</kw>
<kw name="Set Test Variable" owner="BuiltIn">
<msg time="2024-04-03T12:02:08.601327" level="INFO">${response} = [{'id': 9, 'name': 'Glenna Reichert', 'username': 'Delphine', 'email': 'Chaim_McDermott@dana.io', 'address': {'street': 'Dayna Park', 'suite': 'Suite 449', 'city': 'Bartholomebury', 'zipcode': '76495-...</msg>
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="PASS" start="2024-04-03T12:02:08.601327" elapsed="0.000000"/>
</kw>
<status status="PASS" start="2024-04-03T12:02:07.795835" elapsed="0.805492"/>
</kw>
<kw name="When I use the id fetched to search for the posts written by the user" owner="apiJsonPlaceholder_steps">
<kw name="Set Variable" owner="BuiltIn">
<msg time="2024-04-03T12:02:08.601327" level="INFO">${id} = 9</msg>
<var>${id}</var>
<arg>${response}[0][id]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" start="2024-04-03T12:02:08.601327" elapsed="0.000000"/>
</kw>
<kw name="GetUserPosts ${id}" owner="apiJsonPlaceholder" source_name="GetUserPosts ${userId}">
<kw name="GET On Session" owner="RequestsLibrary">
<msg time="2024-04-03T12:02:08.695903" level="INFO">GET Request : url=https://jsonplaceholder.typicode.com/posts?userId=9 
 path_url=/posts?userId=9 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg time="2024-04-03T12:02:08.695903" level="INFO">GET Response : url=https://jsonplaceholder.typicode.com/posts?userId=9 
 status=200, reason=OK 
 headers={'Date': 'Wed, 03 Apr 2024 15:02:08 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Connection': 'keep-alive', 'Report-To': '{"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1710165359&amp;sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&amp;s=OruXMBDt72zDJTWLfkGSj6PnVbR0NneNH1KbjxuvMQI%3D"}]}', 'Reporting-Endpoints': 'heroku-nel=https://nel.heroku.com/reports?ts=1710165359&amp;sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&amp;s=OruXMBDt72zDJTWLfkGSj6PnVbR0NneNH1KbjxuvMQI%3D', 'Nel': '{"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '999', 'X-Ratelimit-Reset': '1710165360', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"aa1-7w0ImWAnFGRWG4ZRQUECVBaSqRo"', 'Content-Encoding': 'gzip', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '8277', 'Server': 'cloudflare', 'CF-RAY': '86e9f020beb50a0e-MIA', 'alt-svc': 'h3=":443"; ma=86400'} 
 body=[
  {
    "userId": 9,
    "id": 81,
    "title": "tempora rem veritatis voluptas quo dolores vero",
    "body": "facere qui nesciunt est voluptatum voluptatem nisi\nsequi eligendi necessitatibus ea at rerum itaque\nharum non ratione velit laboriosam quis consequuntur\nex officiis minima doloremque voluptas ut aut"
  },
  {
    "userId": 9,
    "id": 82,
    "title": "laudantium voluptate suscipit sunt enim enim",
    "body": "ut libero sit aut totam inventore sunt\nporro sint qui sunt molestiae\nconsequatur cupiditate qui iste ducimus adipisci\ndolor enim assumenda soluta laboriosam amet iste delectus hic"
  },
  {
    "userId": 9,
    "id": 83,
    "title": "odit et voluptates doloribus alias odio et",
    "body": "est molestiae facilis quis tempora numquam nihil qui\nvoluptate sapiente consequatur est qui\nnecessitatibus autem aut ipsa aperiam modi dolore numquam\nreprehenderit eius rem quibusdam"
  },
  {
    "userId": 9,
    "id": 84,
    "title": "optio ipsam molestias necessitatibus occaecati facilis veritatis dolores aut",
    "body": "sint molestiae magni a et quos\neaque et quasi\nut rerum debitis similique veniam\nrecusandae dignissimos dolor incidunt consequatur odio"
  },
  {
    "userId": 9,
    "id": 85,
    "title": "dolore veritatis porro provident adipisci blanditiis et sunt",
    "body": "similique sed nisi voluptas iusto omnis\nmollitia et quo\nassumenda suscipit officia magnam sint sed tempora\nenim provident pariatur praesentium atque animi amet ratione"
  },
  {
    "userId": 9,
    "id": 86,
    "title": "placeat quia et porro iste",
    "body": "quasi excepturi consequatur iste autem temporibus sed molestiae beatae\net quaerat et esse ut\nvoluptatem occaecati et vel explicabo autem\nasperiores pariatur deserunt optio"
  },
  {
    "userId": 9,
    "id": 87,
    "title": "nostrum quis quasi placeat",
    "body": "eos et molestiae\nnesciunt ut a\ndolores perspiciatis repellendus repellat aliquid\nmagnam sint rem ipsum est"
  },
  {
    "userId": 9,
    "id": 88,
    "title": "sapiente omnis fugit eos",
    "body": "consequatur omnis est praesentium\nducimus non iste\nneque hic deserunt\nvoluptatibus veniam cum et rerum sed"
  },
  {
    "userId": 9,
    "id": 89,
    "title": "sint soluta et vel magnam aut ut sed qui",
    "body": "repellat aut aperiam totam temporibus autem et\narchitecto magnam ut\nconsequatur qui cupiditate rerum quia soluta dignissimos nihil iure\ntempore quas est"
  },
  {
    "userId": 9,
    "id": 90,
    "title": "ad iusto omnis odit dolor voluptatibus",
    "body": "minus omnis soluta quia\nqui sed adipisci voluptates illum ipsam voluptatem\neligendi officia ut in\neos soluta similique molestias praesentium blanditiis"
  }
] 
 </msg>
<msg time="2024-04-03T12:02:08.695903" level="INFO">${allPosts} = &lt;Response [200]&gt;</msg>
<var>${allPosts}</var>
<arg>jsonplaceholder</arg>
<arg>/posts?userId\=${userId}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<status status="PASS" start="2024-04-03T12:02:08.601327" elapsed="0.094576"/>
</kw>
<for flavor="IN">
<iter>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${post}[userId]</arg>
<arg>${userId}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2024-04-03T12:02:08.710917" elapsed="0.000000"/>
</kw>
<var name="${post}">{'userId': 9, 'id': 81, 'title': 'tempora rem veritatis voluptas quo dolores vero', 'body': 'facere qui nesciunt est voluptatum voluptatem nisi\nsequi eligendi necessitatibus ea at rerum itaque\nharum...</var>
<status status="PASS" start="2024-04-03T12:02:08.710917" elapsed="0.000000"/>
</iter>
<iter>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${post}[userId]</arg>
<arg>${userId}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2024-04-03T12:02:08.710917" elapsed="0.000000"/>
</kw>
<var name="${post}">{'userId': 9, 'id': 82, 'title': 'laudantium voluptate suscipit sunt enim enim', 'body': 'ut libero sit aut totam inventore sunt\nporro sint qui sunt molestiae\nconsequatur cupiditate qui iste ducimus...</var>
<status status="PASS" start="2024-04-03T12:02:08.710917" elapsed="0.000000"/>
</iter>
<iter>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${post}[userId]</arg>
<arg>${userId}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2024-04-03T12:02:08.710917" elapsed="0.000000"/>
</kw>
<var name="${post}">{'userId': 9, 'id': 83, 'title': 'odit et voluptates doloribus alias odio et', 'body': 'est molestiae facilis quis tempora numquam nihil qui\nvoluptate sapiente consequatur est qui\nnecessitatibus aut...</var>
<status status="PASS" start="2024-04-03T12:02:08.710917" elapsed="0.000000"/>
</iter>
<iter>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${post}[userId]</arg>
<arg>${userId}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2024-04-03T12:02:08.710917" elapsed="0.000000"/>
</kw>
<var name="${post}">{'userId': 9, 'id': 84, 'title': 'optio ipsam molestias necessitatibus occaecati facilis veritatis dolores aut', 'body': 'sint molestiae magni a et quos\neaque et quasi\nut rerum debitis similique ven...</var>
<status status="PASS" start="2024-04-03T12:02:08.710917" elapsed="0.000000"/>
</iter>
<iter>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${post}[userId]</arg>
<arg>${userId}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2024-04-03T12:02:08.710917" elapsed="0.000000"/>
</kw>
<var name="${post}">{'userId': 9, 'id': 85, 'title': 'dolore veritatis porro provident adipisci blanditiis et sunt', 'body': 'similique sed nisi voluptas iusto omnis\nmollitia et quo\nassumenda suscipit officia magnam si...</var>
<status status="PASS" start="2024-04-03T12:02:08.710917" elapsed="0.000000"/>
</iter>
<iter>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${post}[userId]</arg>
<arg>${userId}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2024-04-03T12:02:08.710917" elapsed="0.000000"/>
</kw>
<var name="${post}">{'userId': 9, 'id': 86, 'title': 'placeat quia et porro iste', 'body': 'quasi excepturi consequatur iste autem temporibus sed molestiae beatae\net quaerat et esse ut\nvoluptatem occaecati et vel expli...</var>
<status status="PASS" start="2024-04-03T12:02:08.710917" elapsed="0.000000"/>
</iter>
<iter>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${post}[userId]</arg>
<arg>${userId}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2024-04-03T12:02:08.710917" elapsed="0.000000"/>
</kw>
<var name="${post}">{'userId': 9, 'id': 87, 'title': 'nostrum quis quasi placeat', 'body': 'eos et molestiae\nnesciunt ut a\ndolores perspiciatis repellendus repellat aliquid\nmagnam sint rem ipsum est'}</var>
<status status="PASS" start="2024-04-03T12:02:08.710917" elapsed="0.000000"/>
</iter>
<iter>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${post}[userId]</arg>
<arg>${userId}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2024-04-03T12:02:08.710917" elapsed="0.000000"/>
</kw>
<var name="${post}">{'userId': 9, 'id': 88, 'title': 'sapiente omnis fugit eos', 'body': 'consequatur omnis est praesentium\nducimus non iste\nneque hic deserunt\nvoluptatibus veniam cum et rerum sed'}</var>
<status status="PASS" start="2024-04-03T12:02:08.710917" elapsed="0.000000"/>
</iter>
<iter>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${post}[userId]</arg>
<arg>${userId}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2024-04-03T12:02:08.710917" elapsed="0.000000"/>
</kw>
<var name="${post}">{'userId': 9, 'id': 89, 'title': 'sint soluta et vel magnam aut ut sed qui', 'body': 'repellat aut aperiam totam temporibus autem et\narchitecto magnam ut\nconsequatur qui cupiditate rerum quia soluta...</var>
<status status="PASS" start="2024-04-03T12:02:08.710917" elapsed="0.015648"/>
</iter>
<iter>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${post}[userId]</arg>
<arg>${userId}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" start="2024-04-03T12:02:08.726565" elapsed="0.000000"/>
</kw>
<var name="${post}">{'userId': 9, 'id': 90, 'title': 'ad iusto omnis odit dolor voluptatibus', 'body': 'minus omnis soluta quia\nqui sed adipisci voluptates illum ipsam voluptatem\neligendi officia ut in\neos soluta simi...</var>
<status status="PASS" start="2024-04-03T12:02:08.726565" elapsed="0.000000"/>
</iter>
<var>${post}</var>
<value>@{allPosts.json()}</value>
<status status="PASS" start="2024-04-03T12:02:08.695903" elapsed="0.030662"/>
</for>
<return>
<value>${allPosts}</value>
<status status="PASS" start="2024-04-03T12:02:08.726565" elapsed="0.000000"/>
</return>
<msg time="2024-04-03T12:02:08.726565" level="INFO">${allPosts} = &lt;Response [200]&gt;</msg>
<var>${allPosts}</var>
<status status="PASS" start="2024-04-03T12:02:08.601327" elapsed="0.125238"/>
</kw>
<kw name="Set Test Variable" owner="BuiltIn">
<msg time="2024-04-03T12:02:08.730081" level="INFO">${allPosts} = &lt;Response [200]&gt;</msg>
<arg>${allPosts}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="PASS" start="2024-04-03T12:02:08.726565" elapsed="0.003516"/>
</kw>
<status status="PASS" start="2024-04-03T12:02:08.601327" elapsed="0.128754"/>
</kw>
<kw name="Then I validate if the emails in the comment section are in the proper format" owner="apiJsonPlaceholder_steps">
<kw name="Get post Coments emails ${allPosts}" owner="apiJsonPlaceholder" source_name="Get post Coments ${postId}">
<kw name="GET On Session" owner="RequestsLibrary">
<msg time="2024-04-03T12:02:08.989463" level="INFO">GET Request : url=https://jsonplaceholder.typicode.com/comments?postId=emails%20%3CResponse%20%5B200%5D%3E 
 path_url=/comments?postId=emails%20%3CResponse%20%5B200%5D%3E 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg time="2024-04-03T12:02:08.989463" level="INFO">GET Response : url=https://jsonplaceholder.typicode.com/comments?postId=emails%20%3CResponse%20%5B200%5D%3E 
 status=200, reason=OK 
 headers={'Date': 'Wed, 03 Apr 2024 15:02:09 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '2', 'Connection': 'keep-alive', 'Report-To': '{"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1712156529&amp;sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&amp;s=wH7YpwE32J%2FRE7cjdXZD5BOolaWOHcH0bMWLR4K0xrM%3D"}]}', 'Reporting-Endpoints': 'heroku-nel=https://nel.heroku.com/reports?ts=1712156529&amp;sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&amp;s=wH7YpwE32J%2FRE7cjdXZD5BOolaWOHcH0bMWLR4K0xrM%3D', 'Nel': '{"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '999', 'X-Ratelimit-Reset': '1712156543', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'MISS', 'Accept-Ranges': 'bytes', 'Server': 'cloudflare', 'CF-RAY': '86e9f021f8550a0e-MIA', 'alt-svc': 'h3=":443"; ma=86400'} 
 body=[] 
 </msg>
<msg time="2024-04-03T12:02:08.989463" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<arg>jsonplaceholder</arg>
<arg>/comments?postId\=${postId}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<status status="PASS" start="2024-04-03T12:02:08.802044" elapsed="0.187419"/>
</kw>
<for flavor="IN">
<iter>
<kw name="Get Regexp Matches" owner="String">
<var>${result}</var>
<arg>${eachComent}[email]</arg>
<arg>^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<status status="NOT RUN" start="2024-04-03T12:02:08.989463" elapsed="0.000000"/>
</kw>
<if>
<branch type="IF" condition="not ${result}">
<kw name="Log To Console" owner="BuiltIn">
<arg>WARNING!! The Email ${eachComent}[email] From comment ID No. ${postId} is not a valid Email..."</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" start="2024-04-03T12:02:08.989463" elapsed="0.000000"/>
</kw>
<status status="NOT RUN" start="2024-04-03T12:02:08.989463" elapsed="0.000000"/>
</branch>
<status status="NOT RUN" start="2024-04-03T12:02:08.989463" elapsed="0.000000"/>
</if>
<var name="${eachComent}"/>
<status status="NOT RUN" start="2024-04-03T12:02:08.989463" elapsed="0.000000"/>
</iter>
<var>${eachComent}</var>
<value>@{response.json()}</value>
<status status="NOT RUN" start="2024-04-03T12:02:08.989463" elapsed="0.000000"/>
</for>
<return>
<value>${response}</value>
<status status="PASS" start="2024-04-03T12:02:08.989463" elapsed="0.000000"/>
</return>
<status status="PASS" start="2024-04-03T12:02:08.802044" elapsed="0.187419"/>
</kw>
<status status="PASS" start="2024-04-03T12:02:08.802044" elapsed="0.187419"/>
</kw>
<status status="PASS" start="2024-04-03T12:02:07.780251" elapsed="1.209212"/>
</test>
<test id="s1-t2" name="Scenario: Validate the username search by an inexistent user" line="15">
<kw name="Create Session" owner="RequestsLibrary" type="SETUP">
<msg time="2024-04-03T12:02:09.002181" level="INFO">Creating Session using : alias=jsonplaceholder, url=https://jsonplaceholder.typicode.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<arg>jsonplaceholder</arg>
<arg>https://jsonplaceholder.typicode.com</arg>
<arg>verify=true</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<status status="PASS" start="2024-04-03T12:02:09.002181" elapsed="0.001017"/>
</kw>
<kw name="When I search for a inexistent username &quot;inexistentUser&quot;" owner="apiJsonPlaceholder_steps" source_name="I search for a inexistent username &quot;${inexistentUser}&quot;">
<kw name="GetUserInexistentUser ${inexistentUser}" owner="apiJsonPlaceholder" source_name="GetUserInexistentUser ${user}">
<kw name="GET On Session" owner="RequestsLibrary">
<msg time="2024-04-03T12:02:30.779074" level="INFO">GET Request : url=https://jsonplaceholder.typicode.com/users?username=inexistentUser 
 path_url=/users?username=inexistentUser 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg time="2024-04-03T12:02:30.779074" level="INFO">GET Response : url=https://jsonplaceholder.typicode.com/users?username=inexistentUser 
 status=200, reason=OK 
 headers={'Date': 'Wed, 03 Apr 2024 15:02:30 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '2', 'Connection': 'keep-alive', 'Report-To': '{"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1712149458&amp;sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&amp;s=LtW5AkyLHBxZ%2FH6IXw2L3ZkSNuujF8XA9uZ6YxAVnes%3D"}]}', 'Reporting-Endpoints': 'heroku-nel=https://nel.heroku.com/reports?ts=1712149458&amp;sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&amp;s=LtW5AkyLHBxZ%2FH6IXw2L3ZkSNuujF8XA9uZ6YxAVnes%3D', 'Nel': '{"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '999', 'X-Ratelimit-Reset': '1712149463', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '7092', 'Accept-Ranges': 'bytes', 'Server': 'cloudflare', 'CF-RAY': '86e9f0aaba598da3-MIA', 'alt-svc': 'h3=":443"; ma=86400'} 
 body=[] 
 </msg>
<msg time="2024-04-03T12:02:30.779074" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<arg>jsonplaceholder</arg>
<arg>/users?username\=${user}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<status status="PASS" start="2024-04-03T12:02:09.008205" elapsed="21.770869"/>
</kw>
<return>
<value>${response}</value>
<status status="PASS" start="2024-04-03T12:02:30.779074" elapsed="0.000000"/>
</return>
<msg time="2024-04-03T12:02:30.779074" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<status status="PASS" start="2024-04-03T12:02:09.007207" elapsed="21.771867"/>
</kw>
<kw name="Set Test Variable" owner="BuiltIn">
<msg time="2024-04-03T12:02:30.779074" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="PASS" start="2024-04-03T12:02:30.779074" elapsed="0.000000"/>
</kw>
<status status="PASS" start="2024-04-03T12:02:09.006195" elapsed="21.772879"/>
</kw>
<kw name="Then I receive an empty body response" owner="apiJsonPlaceholder_steps">
<kw name="Get Length" owner="BuiltIn">
<msg time="2024-04-03T12:02:30.779074" level="INFO">Length is 0.</msg>
<msg time="2024-04-03T12:02:30.779074" level="INFO">${size} = 0</msg>
<var>${size}</var>
<arg>${response.json()}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<status status="PASS" start="2024-04-03T12:02:30.779074" elapsed="0.000000"/>
</kw>
<kw name="Should Be Equal As Numbers" owner="BuiltIn">
<msg time="2024-04-03T12:02:30.779074" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${size}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<status status="PASS" start="2024-04-03T12:02:30.779074" elapsed="0.000000"/>
</kw>
<status status="PASS" start="2024-04-03T12:02:30.779074" elapsed="0.000000"/>
</kw>
<status status="PASS" start="2024-04-03T12:02:08.989463" elapsed="21.789611"/>
</test>
<test id="s1-t3" name="Scenario: Validate the post search by an inexistent user id" line="19">
<kw name="Create Session" owner="RequestsLibrary" type="SETUP">
<msg time="2024-04-03T12:02:30.800515" level="INFO">Creating Session using : alias=jsonplaceholder, url=https://jsonplaceholder.typicode.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<arg>jsonplaceholder</arg>
<arg>https://jsonplaceholder.typicode.com</arg>
<arg>verify=true</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<status status="PASS" start="2024-04-03T12:02:30.800515" elapsed="0.001001"/>
</kw>
<kw name="When I use an inexistent user id to search for the posts" owner="apiJsonPlaceholder_steps">
<kw name="GetUserPosts ${99999}" owner="apiJsonPlaceholder" source_name="GetUserPosts ${userId}">
<kw name="GET On Session" owner="RequestsLibrary">
<msg time="2024-04-03T12:02:31.645694" level="INFO">GET Request : url=https://jsonplaceholder.typicode.com/posts?userId=99999 
 path_url=/posts?userId=99999 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg time="2024-04-03T12:02:31.645694" level="INFO">GET Response : url=https://jsonplaceholder.typicode.com/posts?userId=99999 
 status=200, reason=OK 
 headers={'Date': 'Wed, 03 Apr 2024 15:02:31 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '2', 'Connection': 'keep-alive', 'Report-To': '{"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1712149459&amp;sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&amp;s=oDHhLyfNvHZO5OuA7z6KLsjUxA4kxzJsJc%2FkXiltYHk%3D"}]}', 'Reporting-Endpoints': 'heroku-nel=https://nel.heroku.com/reports?ts=1712149459&amp;sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&amp;s=oDHhLyfNvHZO5OuA7z6KLsjUxA4kxzJsJc%2FkXiltYHk%3D', 'Nel': '{"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '997', 'X-Ratelimit-Reset': '1712149463', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '7092', 'Accept-Ranges': 'bytes', 'Server': 'cloudflare', 'CF-RAY': '86e9f0b02c9c2269-MIA', 'alt-svc': 'h3=":443"; ma=86400'} 
 body=[] 
 </msg>
<msg time="2024-04-03T12:02:31.645694" level="INFO">${allPosts} = &lt;Response [200]&gt;</msg>
<var>${allPosts}</var>
<arg>jsonplaceholder</arg>
<arg>/posts?userId\=${userId}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<status status="PASS" start="2024-04-03T12:02:30.802747" elapsed="0.842947"/>
</kw>
<for flavor="IN">
<iter>
<kw name="Should Be Equal As Strings" owner="BuiltIn">
<arg>${post}[userId]</arg>
<arg>${userId}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="NOT RUN" start="2024-04-03T12:02:31.645694" elapsed="0.000000"/>
</kw>
<var name="${post}"/>
<status status="NOT RUN" start="2024-04-03T12:02:31.645694" elapsed="0.000000"/>
</iter>
<var>${post}</var>
<value>@{allPosts.json()}</value>
<status status="NOT RUN" start="2024-04-03T12:02:31.645694" elapsed="0.000000"/>
</for>
<return>
<value>${allPosts}</value>
<status status="PASS" start="2024-04-03T12:02:31.645694" elapsed="0.000000"/>
</return>
<msg time="2024-04-03T12:02:31.645694" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<status status="PASS" start="2024-04-03T12:02:30.802747" elapsed="0.842947"/>
</kw>
<kw name="Set Test Variable" owner="BuiltIn">
<msg time="2024-04-03T12:02:31.645694" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="PASS" start="2024-04-03T12:02:31.645694" elapsed="0.000000"/>
</kw>
<status status="PASS" start="2024-04-03T12:02:30.802747" elapsed="0.842947"/>
</kw>
<kw name="Then I receive an empty body response" owner="apiJsonPlaceholder_steps">
<kw name="Get Length" owner="BuiltIn">
<msg time="2024-04-03T12:02:31.645694" level="INFO">Length is 0.</msg>
<msg time="2024-04-03T12:02:31.645694" level="INFO">${size} = 0</msg>
<var>${size}</var>
<arg>${response.json()}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<status status="PASS" start="2024-04-03T12:02:31.645694" elapsed="0.000000"/>
</kw>
<kw name="Should Be Equal As Numbers" owner="BuiltIn">
<msg time="2024-04-03T12:02:31.645694" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${size}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<status status="PASS" start="2024-04-03T12:02:31.645694" elapsed="0.000000"/>
</kw>
<status status="PASS" start="2024-04-03T12:02:31.645694" elapsed="0.000000"/>
</kw>
<status status="PASS" start="2024-04-03T12:02:30.799511" elapsed="0.861818"/>
</test>
<test id="s1-t4" name="Scenario: Validate the post comment search by an inexistent post id" line="24">
<kw name="Create Session" owner="RequestsLibrary" type="SETUP">
<msg time="2024-04-03T12:02:31.669563" level="INFO">Creating Session using : alias=jsonplaceholder, url=https://jsonplaceholder.typicode.com, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<arg>jsonplaceholder</arg>
<arg>https://jsonplaceholder.typicode.com</arg>
<arg>verify=true</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<status status="PASS" start="2024-04-03T12:02:31.668645" elapsed="0.000918"/>
</kw>
<kw name="When I use an inexistent post id to search for the posts comments" owner="apiJsonPlaceholder_steps">
<kw name="Get post Coments ${999999}" owner="apiJsonPlaceholder" source_name="Get post Coments ${postId}">
<kw name="GET On Session" owner="RequestsLibrary">
<msg time="2024-04-03T12:02:32.415778" level="INFO">GET Request : url=https://jsonplaceholder.typicode.com/comments?postId=999999 
 path_url=/comments?postId=999999 
 headers={'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg time="2024-04-03T12:02:32.431396" level="INFO">GET Response : url=https://jsonplaceholder.typicode.com/comments?postId=999999 
 status=200, reason=OK 
 headers={'Date': 'Wed, 03 Apr 2024 15:02:32 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Content-Length': '2', 'Connection': 'keep-alive', 'Report-To': '{"group":"heroku-nel","max_age":3600,"endpoints":[{"url":"https://nel.heroku.com/reports?ts=1712156346&amp;sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&amp;s=MUp%2FwKrD8Q6Ff%2FzMs7ORwdODA3jWomg%2F3bB5k6a4QXE%3D"}]}', 'Reporting-Endpoints': 'heroku-nel=https://nel.heroku.com/reports?ts=1712156346&amp;sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&amp;s=MUp%2FwKrD8Q6Ff%2FzMs7ORwdODA3jWomg%2F3bB5k6a4QXE%3D', 'Nel': '{"report_to":"heroku-nel","max_age":3600,"success_fraction":0.005,"failure_fraction":0.05,"response_headers":["Via"]}', 'X-Powered-By': 'Express', 'X-Ratelimit-Limit': '1000', 'X-Ratelimit-Remaining': '999', 'X-Ratelimit-Reset': '1712156363', 'Vary': 'Origin, Accept-Encoding', 'Access-Control-Allow-Credentials': 'true', 'Cache-Control': 'max-age=43200', 'Pragma': 'no-cache', 'Expires': '-1', 'X-Content-Type-Options': 'nosniff', 'Etag': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"', 'Via': '1.1 vegur', 'CF-Cache-Status': 'HIT', 'Age': '206', 'Accept-Ranges': 'bytes', 'Server': 'cloudflare', 'CF-RAY': '86e9f0b4fdce7496-MIA', 'alt-svc': 'h3=":443"; ma=86400'} 
 body=[] 
 </msg>
<msg time="2024-04-03T12:02:32.431396" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<arg>jsonplaceholder</arg>
<arg>/comments?postId\=${postId}</arg>
<doc>Sends a GET request on a previously created HTTP Session.</doc>
<status status="PASS" start="2024-04-03T12:02:31.669563" elapsed="0.761833"/>
</kw>
<for flavor="IN">
<iter>
<kw name="Get Regexp Matches" owner="String">
<var>${result}</var>
<arg>${eachComent}[email]</arg>
<arg>^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$</arg>
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<status status="NOT RUN" start="2024-04-03T12:02:32.431396" elapsed="0.000000"/>
</kw>
<if>
<branch type="IF" condition="not ${result}">
<kw name="Log To Console" owner="BuiltIn">
<arg>WARNING!! The Email ${eachComent}[email] From comment ID No. ${postId} is not a valid Email..."</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" start="2024-04-03T12:02:32.434415" elapsed="0.000000"/>
</kw>
<status status="NOT RUN" start="2024-04-03T12:02:32.431396" elapsed="0.003019"/>
</branch>
<status status="NOT RUN" start="2024-04-03T12:02:32.431396" elapsed="0.003019"/>
</if>
<var name="${eachComent}"/>
<status status="NOT RUN" start="2024-04-03T12:02:32.431396" elapsed="0.003019"/>
</iter>
<var>${eachComent}</var>
<value>@{response.json()}</value>
<status status="NOT RUN" start="2024-04-03T12:02:32.431396" elapsed="0.003019"/>
</for>
<return>
<value>${response}</value>
<status status="PASS" start="2024-04-03T12:02:32.434415" elapsed="0.000000"/>
</return>
<msg time="2024-04-03T12:02:32.434415" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<var>${response}</var>
<status status="PASS" start="2024-04-03T12:02:31.669563" elapsed="0.764852"/>
</kw>
<kw name="Set Test Variable" owner="BuiltIn">
<msg time="2024-04-03T12:02:32.434415" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<arg>${response}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="PASS" start="2024-04-03T12:02:32.434415" elapsed="0.000000"/>
</kw>
<status status="PASS" start="2024-04-03T12:02:31.669563" elapsed="0.764852"/>
</kw>
<kw name="Then I receive an empty body response" owner="apiJsonPlaceholder_steps">
<kw name="Get Length" owner="BuiltIn">
<msg time="2024-04-03T12:02:32.434415" level="INFO">Length is 0.</msg>
<msg time="2024-04-03T12:02:32.434415" level="INFO">${size} = 0</msg>
<var>${size}</var>
<arg>${response.json()}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<status status="PASS" start="2024-04-03T12:02:32.434415" elapsed="0.000000"/>
</kw>
<kw name="Should Be Equal As Numbers" owner="BuiltIn">
<msg time="2024-04-03T12:02:32.434415" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;class 'str'&gt;</msg>
<arg>${size}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<status status="PASS" start="2024-04-03T12:02:32.434415" elapsed="0.000000"/>
</kw>
<status status="PASS" start="2024-04-03T12:02:32.434415" elapsed="0.000000"/>
</kw>
<tag>teste</tag>
<status status="PASS" start="2024-04-03T12:02:31.667640" elapsed="0.766775"/>
</test>
<status status="PASS" start="2024-04-03T12:02:07.568454" elapsed="24.880872"/>
</suite>
<statistics>
<total>
<stat pass="4" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">teste</stat>
</tag>
<suite>
<stat pass="4" fail="0" skip="0" id="s1" name="Apijsonplaceholder">Apijsonplaceholder</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
